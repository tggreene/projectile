#!/usr/bin/env python3
#
# PROJECTILE
# ----------
# Simple program to bootstrap new projects
#   - Scaffolds are dumb copies
#   - Plugins generate dynamic content

#
# Imports
#
import os
import sys
import argparse
import json
import subprocess
import platform

#
# Version
#
_version = '0.0.4'

#
# Globals
#
_test = False
_noop = False
_debug = False
_home = os.environ['HOME']
_path = {
    'dir':      '%s/.projectile' % _home,
    'scaffold': '%s/.projectile/scaffold' % _home,
    'plugin':   '%s/.projectile/plugin' % _home,
    'config':   '%s/.projectile/settings.json' % _home,
}

#
# Helper Functions
#

# Testing during development
def test():
    # print(macro('stuff', { 'stuff': 'things' }))
    content = getFileContents(_path['plugin'] + '/hl/sublime.sublime-project')
    translate = {
        'env': '53',
        'blah': 'break_on_start'
    }
    print(macro(content, translate))

# Returns string contents of a file
def getFileContents(path):
    file = open(path, 'r')
    contents = file.read()
    file.close()
    return contents

def putFileContents(path, contents):
    file = open(path, 'w')
    file.write(contents)
    file.close()

def macro(text, translate):
    keys = translate.keys()
    translatedText = text
    for term in keys:
        translatedText = translatedText.replace('%s%s' % ('%', term), translate[term])
    return translatedText

# Returns object from JSON string
def getJsonConfig(path):
    return json.loads(getFileContents(path))

# Generic method to execute command list directly
def execute(command):
    subprocess.call(command)

def createFolder(path):
    if not os.path.isdir(path):
        execute(['mkdir', path])

#
# Module Functions
#

# Loads config object from home directory
def loadConfig(path):
    return getJsonConfig(path)

# Used to interpret plugin parameter entries
def pluginParams(string):
    if ':' in string:
        return {
            string.split(':')[0]: string.split(':')[1]
        }
    else:
        return string

# Run all checks ahead of parsing
def preChecks():
    # Check for existance of program config directory
    if not os.path.isdir(_path['dir']):
        print('Projectile home directory does not exist')
        print('(%s)' % _path['dir'])
        return False
    return True

# Main project function
def createProject(project):
    if os.path.isdir(project):
        pass
    else:
        print('Creating project directory...')
        createFolder(project)

# Main scaffolding function
def applyScaffold(project, scaffold):
    print('Applying project scaffold...')
    execute([
        'cp',
        '-r',
        '%s/%s/.' % (_path['scaffold'], scaffold),
        project
    ])

def expandTranslation(translate, params):
    expanded = {}
    for word in translate:
        for param in params:
            if word in param:
                expanded[word] = param[word]
    return expanded

# OS Sensitive symlink function
def createSymlink(target, name, translate):
    if translate is not None:
        target = macro(target, translate)

    if not os.path.exists(target):
        print(' - Target does not exist')
    elif os.path.exists(name):
        print(' - Link path already exists')
    else:
        os.symlink(target, name)

# Main plugin function
def applyPlugin(project, plugin, optional):
    print('Applying plugin to project...')
    pluginPath = '%s/%s' % (_path['plugin'], plugin)
    config = loadConfig('%s/config.json' % (pluginPath))
    translation = {
        'project': project
    }
    for option in optional:
        translation.update(option)

    # Check required inputs
    for req in config['require']:
        found = False
        for opt in optional:
            if req in opt:
                found = True
        if not found:
            print('Expected %s parameter for %s plugin' % (req, plugin))
            return

    if 'symlinks' in config:
        for symlink in config['symlinks']:
            createSymlink(
                symlink['path'],
                '%s/%s' % (project, symlink['name']),
                translation
            )

    if 'folders' in config:
        for folder in config['folders']:
            createFolder('%s/%s' % (project, folder))

    if 'files' in config:
        for file in config['files']:
            # translation = expandTranslation(file['translation'], optional)
            contents = getFileContents('%s/%s' % (pluginPath, file['source']))
            print(macro('%s/%s' % (project, file['source']), translation))
            putFileContents(
                macro('%s/%s' % (project, file['source']), translation),
                macro(contents, translation)
            )

#
# Main Execution
#
# Encapsulate execution behaviour
# Catch exceptions
#
def main():
    if _test:
        test()
        return
    if not preChecks():
        return
    config = loadConfig(_path['config'])
    try:
        parser = argparse.ArgumentParser(
            description='Projectile: Project Manager'
        )
        parser.add_argument(
            'project',
            action='store',
            type=str,
            help='Project name',
        )
        parser.add_argument(
            '-s',
            '--scaffold',
            action='store',
            type=str,
            help='Choose scaffolding for your project',
            default=config['default']['scaffold']
        )
        parser.add_argument(
            '-p',
            '--plugin',
            action='store',
            type=str,
            help='Choose complex behaviour for initialising your project',
            default=config['default']['plugin']
        )
        parser.add_argument(
            'optional',
            action='store',
            type=pluginParams,
            help='Additional arguments required by plugins as name:value pairs',
            nargs='*'
        )

        args = parser.parse_args()

        if _debug:
            print(sys.argv)
            print(args)

        if _noop:
            return

        createProject(args.project)
        if 'scaffold' in args:
            applyScaffold(args.project, args.scaffold)
        else:
            print('No scaffold applied')
        if 'plugin' in args:
            applyPlugin(args.project, args.plugin, args.optional)
        else:
            print('No plugin applied')
    except KeyboardInterrupt:
        pass

# Default execution handler
if __name__ == '__main__':
    main()
